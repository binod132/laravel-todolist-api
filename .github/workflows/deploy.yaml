name: Deploy Application via Docker Compose

on:
  push:
    branches:
      - main  # Trigger on push to 'dev' branch or change this to your branch

jobs:
  deploy:
    runs-on: self-hosted  # Use your self-hosted runner

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Clear Composer cache
        run: composer clear-cache

      - name: Install dependencies
        run: composer install --no-scripts --no-interaction --prefer-dist

      - name: Lint code with PHP_CodeSniffer
        run: ./vendor/bin/phpcs --standard=PSR12 app/
        continue-on-error: true
      # Step 2: Log in to Docker registry
      - name: Docker Login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin ${{ secrets.DOCKER_REGISTRY }}
          whoami
          docker pull hmis-repo.midashealthservices.com.np/php:8.1
      # Step 3: SSH into VM, perform git pull, checkout dev, and run Docker Compose
      - name: SSH into VM, git pull, and run Docker Compose
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH }}  # GitHub secret for the private SSH key
          SSH_USER: ubuntu  # GitHub secret for the SSH user
          VM_INTERNAL_IP: "192.168.130.254"  # GitHub secret for the VM's internal IP
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
        run: |
          # Set up SSH agent to use the private key
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add the VM to known hosts to avoid SSH prompts
          ssh-keyscan -H $VM_INTERNAL_IP >> ~/.ssh/known_hosts

          # SSH into the VM and perform actions
          ssh -o StrictHostKeyChecking=no $SSH_USER@$VM_INTERNAL_IP << 'EOF'
            # Navigate to the project directory
            cd /home/ubuntu/project/laravel-todolist-api

            # Perform git pull to fetch the latest changes
            git pull origin rollingupdate

            # Checkout to the dev branch
            git checkout rollingupdate

            # List the contents of the directory to confirm we're in the right place
            ls -al

            # Pull the latest Docker images
            docker compose pull

            # Run docker-compose up in detached mode
            ls -l | grep Dockerfile.app
            # Database Migration
            echo "Running database migration..."
            docker compose exec todo-app-1 php artisan migrate --force

            # Update todo-app-1 and 2
            docker compose stop todo-app
            VAULT_TOKEN=${VAULT_TOKEN} docker compose up --build -d todo-app-1
            sleep 10
            docker ps | grep todo-app-1
            echo "Updating todo-app-2..."
            #docker compose stop todo-app-2
            VAULT_TOKEN=${VAULT_TOKEN} docker compose up --build -d todo-app-2
            sleep 10
            docker ps | grep todo-app-2
            # # Check build
            # echo "docker compose up ............."
            # #docker compose down -v --remove-orphans
            # docker compose down
            # VAULT_TOKEN=${VAULT_TOKEN} docker compose up --build -d

            # Optional: Verify the status of the Docker containers
            docker ps
          EOF
