- name: SSH Connection via sshpass to remote Ubuntu VM
  hosts: localhost
  gather_facts: no
  vars:
    ssh_password: "ubuntu"
    ssh_user: "ubuntu"
    remote_host: "192.168.130.108"
  tasks:
    - name: Check if Docker is installed on remote VM
      ansible.builtin.shell:
        cmd: "sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ ssh_user }}@{{ remote_host }} 'docker --version'"
      register: docker_check
      ignore_errors: yes

    - name: Install Docker if not installed
      ansible.builtin.shell:
        cmd: |
          sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ ssh_user }}@{{ remote_host }} << EOF
          sudo apt-get update -y &&
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common &&
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg &&
          echo "deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null &&
          sudo apt-get update -y &&
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io &&
          sudo systemctl start docker &&
          sudo systemctl enable docker
          EOF
      when: docker_check.rc != 0
      register: docker_install_output
      ignore_errors: yes

    - name: Check Docker service status
      ansible.builtin.shell:
        cmd: "sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ ssh_user }}@{{ remote_host }} 'sudo systemctl status docker'"
      register: docker_status
      ignore_errors: yes

    - name: Add user to Docker group to allow passwordless Docker usage
      ansible.builtin.shell:
        cmd: |
          sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ ssh_user }}@{{ remote_host }} << EOF
          sudo usermod -aG docker {{ ssh_user }} &&
          newgrp docker
          EOF
      when: docker_check.rc == 0
      ignore_errors: yes

    - name: Test if Docker is accessible by user without sudo (docker ps)
      ansible.builtin.shell:
        cmd: "sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ ssh_user }}@{{ remote_host }} 'docker ps'"
      register: docker_ps_output
      ignore_errors: yes

    - name: Fail if docker ps shows permission error
      ansible.builtin.fail:
        msg: "Permission denied while trying to connect to Docker daemon. The user does not have access to Docker without sudo."
      when: "'permission denied' in docker_ps_output.stderr"

    - name: Print Docker installation result
      debug:
        var: docker_install_output.stdout

    - name: Print Docker service status
      debug:
        var: docker_status.stdout

    - name: Print Docker PS output
      debug:
        var: docker_ps_output.stdout

    - name: Install Docker Compose
      ansible.builtin.shell:
        cmd: |
          sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ ssh_user }}@{{ remote_host }} << EOF
          if ! command -v docker-compose &> /dev/null
          then
            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose &&
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          EOF
      register: docker_compose_install_output
      ignore_errors: yes

    - name: Check Docker Compose version
      ansible.builtin.shell:
        cmd: "sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ ssh_user }}@{{ remote_host }} 'docker compose version'"
      register: docker_compose_version_output
      ignore_errors: yes

    - name: Print Docker Compose installation result
      debug:
        var: docker_compose_install_output.stdout

    - name: Print Docker Compose version
      debug:
        var: docker_compose_version_output.stdout
