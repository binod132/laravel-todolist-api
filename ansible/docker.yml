---
- name: SSH Connection via sshpass to remote Ubuntu VM
  hosts: localhost
  gather_facts: no
  vars:
    ssh_password: "ubuntu"
    ssh_user: "ubuntu"
    remote_host: "192.168.130.108"
  tasks:
    - name: Check if Docker is installed on remote VM
      ansible.builtin.shell:
        cmd: "sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ ssh_user }}@{{ remote_host }} 'docker --version'"
      register: docker_check
      ignore_errors: yes

    - name: Install Docker if not installed
      ansible.builtin.shell:
        cmd: |
          sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ ssh_user }}@{{ remote_host }} << EOF
          sudo apt-get update -y &&
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common &&
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg &&
          echo "deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null &&
          sudo apt-get update -y &&
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io &&
          sudo systemctl start docker &&
          sudo systemctl enable docker
          EOF
      when: docker_check.rc != 0
      register: docker_install_output
      ignore_errors: yes

    - name: Check Docker service status
      ansible.builtin.shell:
        cmd: "sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ ssh_user }}@{{ remote_host }} 'sudo systemctl status docker'"
      register: docker_status
      ignore_errors: yes

    - name: Add user to Docker group to allow passwordless Docker usage
      ansible.builtin.shell:
        cmd: |
          sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null {{ ssh_user }}@{{ remote_host }} << EOF
          sudo usermod -aG docker {{ ssh_user }} &&
          sudo su - {{ ssh_user }}
          EOF
      when: docker_check.rc == 0
      ignore_errors: yes

    - name: Print Docker installation result
      debug:
        var: docker_install_output.stdout
